{"version":3,"sources":["RecipesData.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["RecipeIndex","Item","match","items","deleteItem","editItem","console","log","params","id","product","find","p","useState","item","setItem","className","recipe","ingredients","map","i","directions","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","onSubmit","e","preventDefault","type","value","onChange","target","ing","split","dir","onClick","App","data","JSON","parse","localStorage","getItem","RecipeData","recipeData","setRecipeData","count","setCount","deleted","setDeleted","useEffect","stringify","addItem","length","prevCount","alert","recipes","c","splice","to","exact","path","render","placeholder","props","key","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3f314e3.chunk.js","sourcesContent":["const RecipeIndex = [\n  {\n    'recipe' : 'Artichoke-Pasta','id':1,'ingredients' : ['2 tablespoons butter', '2 cloves garlic, minced','1 cup heavy cream','3/4 teaspoon salt','1 teaspoon fresh-ground black pepper', '2 1/2 cups canned, drained artichoke hearts (two 14-ounce cans), rinsed and cut into halves or quarters','3/4 pound fusilli','1/2 cup grated Parmesan cheese','2 tablespoons chopped chives, scallion tops, or parsley',],'directions' : ['In a medium saucepan, melt the butter over moderately low heat. Add the garlic and cook for 30 seconds. Stir in the cream, salt, pepper, and artichoke hearts. Cook until just heated through, about 3 minutes.','In a large pot of boiling, salted water, cook the fusilli until just done, about 13 minutes. Drain the pasta and toss with the cream sauce, Parmesan, and chives.']\n  },\n  {\n    'recipe' : \"Garlic-Chicken\",'id':2,\"ingredients\" : [\"3 tablespoons butter\",\"1 teaspoon seasoning salt\",\"1 teaspoon onion powder \",\"4 skinless, boneless chicken breast halves\",\"2 teaspoons garlic powder\"], \"directions\" : [\"Melt butter in a large skillet over medium high heat.\", \"Add chicken and sprinkle with garlic powder, seasoning salt and onion powder.\", \"Saute about 10 to 15 minutes on each side, or until chicken is cooked through and juices run clear.\"]\n  },\n  {\n    \"recipe\" : \"Easy-Chocolate-Pie\",'id':3,\"ingredients\" : [\"1 (12 ounce) can evaporated milk\",\"1 (5.9 ounce) package chocolate instant pudding mix\", \"1 (6.5 ounce) can whipped cream\", \"1/2 cup miniature semi-sweet chocolate chips (optional)\",\"1 (9 inch) graham cracker pie crust\",\"Another can of whipped cream for garnish (optional)\"], \"directions\" : [\"Pour milk into medium bowl. Add dry pudding mix; beat with wire whisk until well blended and mixture just begins to thicken. Stir in half of the chocolate chips.\",\"Add contents of whipped cream can; stir gently but quickly until well blended. Pour into crust; cover.\",\"Refrigerate 6 hours, or until set. Cut into 8 slices to serve. Garnish with additional whipped cream and remaining chocolate chips, if desired.\"]\n  },\n  {\n    'recipe' : 'Lime-Chicken-Tacos','id':4, 'ingredients' : ['1 1/2 pounds skinless, boneless chicken breast meat - cubed', '1/8 cup red wine vinegar', '1/2 lime, juiced', '1 teaspoon white sugar', '1/2 teaspoon salt', '1/2 teaspoon ground black pepper', '2 green onions, chopped', '2 cloves garlic, minced', '1 teaspoon dried oregano', '10 (6 inch) corn tortillas', '1 tomato, diced', '1/4 cup shredded lettuce', '1/4 cup shredded Monterey Jack cheese', '1/4 cup salsa'], 'directions' : ['Saute chicken in a medium saucepan over medium high heat for about 20 minutes. Add vinegar, lime juice, sugar, salt, pepper, green onion, garlic and oregano. Simmer for an extra 10 minutes.', 'Heat an iron skillet over medium heat. Place a tortilla in the pan, warm, and turn over to heat the other side. Repeat with remaining tortillas. Serve lime chicken mixture in warm tortillas topped with tomato, lettuce, cheese and salsa.']\n   },\n  {\n    'recipe': 'Artichoke-Dip','id':5,'ingredients' : ['1 8oz package soft cream cheese', '4oz mayonnaise','4oz sour cream','1/4 Cup Fresh Grated Parmesan Cheese','1/4 Cup Fresh Grated Romano Cheese','2 eggs','3/4 Cup dairy sour cream','1 16oz can artichoke hearts','1/4 Cup fresh chopped chives','1 tbs fresh minced garlic'],'directions' : ['Soften the cream cheese before mixing.','Rinse well, then dice the artichokes into small ½” size pieces.','Into a mixing bowl place the softened cream cheese. Mix in the mayonnaise, sour cream, the Parmesan and Romano cheese, artichokes and garlic.','When the mixture is fairly well blended, spoon into a 9” round glass pie dish.', 'Set Oven to Bake at 350 degrees.','Place un-covered dish into oven for 20 – 25 minutes until the edges appear slightly golden and mixture is bubbling at the edge.','Remove and sprinkle chopped chives on top and let cool about 5 minutes before serving.','Enjoy!'] \n   },\n];\n\nexport default RecipeIndex;","import React, {useState} from 'react'\nimport {Button,Card,Accordion} from 'react-bootstrap'\n\nconst Item=({match,items,deleteItem,editItem})=>{\n    console.log(match.params.id)\n    var product=items.find(p=>p.id==match.params.id)\n    const [item,setItem]=useState(product)\n    return(\n        <div className=\"item\">\n        <h1>{item.recipe}</h1>\n        <h2>Ingredients</h2>\n        <ul>\n        {item.ingredients.map(i=><li>{i}</li>)}\n        </ul>\n        <h2>Directions</h2>\n        <ul>\n          {item.directions.map(i=><li>{i}</li>)}\n        </ul>\n         <Accordion defaultActiveKey=\"0\">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n        Edit\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>\n\n    <form onSubmit={(e)=>{\n            e.preventDefault()\n            editItem(item)}}>\n        <textarea type=\"text\" \n        value={item.recipe} \n        onChange={e=>setItem({...item, recipe: e.target.value})}/>\n        \n        <textarea type=\"text\"\n        value={item.ingredients}\n        onChange={e=>{\n        let ing=e.target.value    \n        ing=ing.split(\",\");\n        console.log(ing)\n    setItem({...item,ingredients:ing})}} />\n\n        <textarea type=\"text\"\n        value={item.directions}\n        onChange={e=>{\n        let dir=e.target.value    \n        dir=dir.split(\",\");\n        setItem({...item,directions:dir})}} />\n\n    <button type=\"submit\">submit</button>\n    </form>\n        \n</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n        <button className=\"delete\" onClick={()=>deleteItem(item)}>Delete</button>\n        </div>\n    )\n}\n\nexport default Item\n\n\nvar re=/\\r\\n|\\n\\r|\\n|\\r/g;\n","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport RecipeData from './RecipesData'\nimport {Link, Route, Switch,Redirect} from 'react-router-dom'\nimport Item from './Item'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button,Card,Accordion} from 'react-bootstrap'\n\nfunction App() {\n    let data=JSON.parse (localStorage.getItem('data'))\n   const [recipeData,setRecipeData] =useState(data|| RecipeData)\n   const [item,setItem]=useState({recipe:'',ingredients:[],directions:[],id:6})\n   \n   const[count,setCount]=useState(7)\n   const [deleted,setDeleted]=useState(false)\n \n   useEffect(() => {\n       let data=JSON.stringify(recipeData)\n    localStorage.setItem('data', data);\n  }, [recipeData]);\n    \n    \n   const addItem=(e) =>{    \n       e.preventDefault()\n      if(item.recipe&&item.directions.length>0){\n      setCount(prevCount=>prevCount+1)      \n        setItem({...item,id:count})\n        setRecipeData([...recipeData,item])\n        setItem({recipe:'',ingredients:[],directions:[],id:count})}\n       \n       else{alert(\"Fill all the Inputs\")}\n       \n      localStorage.setItem('myValueInLocalStorage', recipeData);\n   }\n   \n   \n   const editItem=(item)=>{\n      if(item.recipe){\n       \n      const recipes=recipeData;\n      for(let i=0;i<recipeData.length;i++){\n          \n          if(recipeData[i].id==item.id){\n              recipes[i]=item;\n          }\n      }\n       setRecipeData(recipes)\n       \n   }\n   else{alert(\"fill all the inputs\")}\n   }\n   \n   \n  const deleteItem=(e)=>{\n     \n   \n      let c=0;\n      const recipes=recipeData;\n      for(let i=0;i<recipeData.length;i++){\n          c++;\n          if(recipeData[i].id===e.id){\n              break;\n          }\n      }\n       \n      recipes.splice(c-1,1)\n    setRecipeData(recipes);\n      setDeleted(true)\n   }\n  \n  \n  return (\n    <div className=\"App\">\n      <header>\n                <h2>Recipe Box</h2>\n                <Link to=\"recipeBox/\"><h3>Home</h3></Link>\n            </header>\n   {deleted?<Redirect to=\"/recipeBox/\" />:null}\n      <Route exact path=\"/recipeBox/\" render={()=> \n      <div>\n      {setDeleted(false)}\n      \n      \n      <ul>\n      \n      {recipeData.map(item=>{ \n       return(\n       <li><Link to={`/recipeBox/${item.id}`}>{item.recipe}</Link></li> )\n        \n        }\n            ) }\n     \n    </ul>\n    \n    <Accordion defaultActiveKey=\"0\">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n        Add Recipe\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>\n\n    <form onSubmit={addItem}>\n        <textarea type=\"text\" \n        value={item.recipe} \n        \n        onChange={e=>setItem({...item, recipe: e.target.value})}/>\n        \n        <textarea type=\"text\"\n        value={item.ingredients}\nplaceholder=\"separate lines with , \"\n        onChange={e=>{\n        let ing=e.target.value    \n        ing=ing.split(\",\");\n        \n        console.log(ing)\n    setItem({...item,ingredients:ing})}} />\n\n        <textarea type=\"text\"\n        value={item.directions}\nplaceholder=\"separate lines with , \"\n        onChange={e=>{\n        let dir=e.target.value    \n        dir=dir.split(\",\");\n      \n        console.log(dir)\n        setItem({...item,directions:dir})}} />\n\n    <button type=\"submit\">submit</button>\n    </form>\n        \n</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n\n</div>\n\n} />\n\n   \n      \n    <Route path={`recipeBox/:id`} render={(props)=><Item {...props} key={item.id} items={recipeData} deleteItem={deleteItem} editItem={editItem}/>} />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}